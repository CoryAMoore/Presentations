<#
.SYNOPSIS
This script will alert by email, on any datasets that have failed a refresh & a subsequent manual refresh attempt.

.DESCRIPTION
This script will iterate through all datasets in all Workspaces within Power BI that the chosen user has access to.
It will then attempt to force a refresh of any datasets with a failed status. The script should be scheduled to run 
at a regulat interval. Upon the next run, it will send a notification email on any failed refreshes made by the API 
(on the last run). There is a time limiter parameter that will stop the repetitive alerting of a failed dataset.

.PARAMETER userName
This is the Power BI user that the API will use to query workspaces and datasets. The datasets & groups that are returned
are restricted by the user's permissions

.PARAMETER tenantID
# To find your Office 365 tenant ID in the Azure AD portal
# - Log in to Microsoft Azure as an administrator.
# - In the Microsoft Azure portal, click Azure Active Directory.
# - Under Manage, click Properties. The tenant ID is shown in the Directory ID box.

.PARAMETER clientId
This is the ID generated by the Power BI App created above. It can also be found from
within Azure

.PARAMETER client_secret
This is also generated when the Power BI App is created & must be noted as it is
irretrievable once you leave the page

.PARAMETER maxTime
The time window of how long you want to alert on failed refreshes via the API. Eg. 30 = If Last refresh end time is beyond 30 mins, do not alert.
This will reduce spam of alert emails when issues may take time to resolve. 

.PARAMETER mailServer
Your mail server

.PARAMETER mailFrom
Your selected FROM address to send error or notification emails

.PARAMETER mailTo
The recipient email address or addresses (separated by semicolons) that will receive
error and notification emails

.EXAMPLE
.\PowerBI_Dataset_Alerting.ps1 -userName 'Username@Domain.com' -tenantID "85b7f285-XXXX-XXXX-XXXX-ec7116aa9ef5" -clientId "f40daa92-XXXX-XXXX-XXXX-7e027fe03e2e" -client_secret "5bM2KeZl2nVXXXXXXXXXXXXi6IYVPOt8lAtPwXXXXXX="

.NOTES
#-------------------------------------------------------------------------------
# Client ID & Client Secret can be obtained from creating a PowerBI app:
# https://dev.powerbi.com/apps
# App Type: Server-side Web app
#-------------------------------------------------------------------------------    
#>

[CmdletBinding()]
param
(
    [Parameter(Mandatory=$true)]
    [string]
    $userName = "$(Read-Host 'Power BI Account')",
    
    [string]
    $tenantID,
    
    [Parameter(Mandatory=$true)]  
    [string]
    $clientId,

    [Parameter(Mandatory=$true)]  
    [string]
    $client_secret,

    [int]
    $maxTime = 30
)

begin {
    Write-Verbose 'Add Authentication & Notification Functions'
    . ".\Get-PBIAuthTokenUnattended.ps1"
    . ".\Invoke-AlertEmail.ps1"

    if($tenantID = $null)
    {
        Write-Verbose 'Split the string on the username to get the Domain'
        $tenantDomain = $userName.Split("@")[1]
        Write-Verbose 'Querying Azure anonymously (this may not work for ALL tenant domains. Eg. Those that use .onmicrosoft.com)'
        $tenantID = (Invoke-WebRequest https://login.windows.net/$($tenantDomain)/.well-known/openid-configuration|ConvertFrom-Json).token_endpoint.Split('/')[3]
    }

}
process {
    try {        
        Write-Verbose 'Authenticate to Power BI using Get-PBIAuthTokenUnattended'
        $auth = Get-PBIAuthTokenUnattended -userName $userName -tenantID $tenantID -clientId $clientId -client_secret $client_secret

        Write-Verbose 'Building Rest API header with authorization token'
        $authHeader = @{
        'Content-Type'='application/json'
        'Authorization'='Bearer ' + $auth.access_token
        }
    }
    catch {
        Write-Error 'Authentication failure'
        $script = $MyInvocation.MyCommand.Name	
        $Subject = "$script Error: Authentication Failure"
        $htmlContent = $_.Exception.Message
        Invoke-AlertEmail -title $script -htmlContent $htmlContent -subject $subject -alertColour "#FF5733"  
        throw $_
    }

    try{
        Write-Verbose 'Retrieve all Power BI Workspaces'
        $uri = "https://api.powerbi.com/v1.0/myorg/groups"
        $allGroups = Invoke-RestMethod -Uri $uri -Headers $authHeader -Method GET

        Write-Verbose 'Storing time interval provided as window to alert on failed datasets (reduces SPAM from datasets failing regularly)'
        $timeWindow = (Get-Date).AddMinutes(-$maxTime)
        Write-Verbose "Monitor will not alert on API based failures older than $($timeWindow)"

        Write-Verbose 'Loop through Workspaces to query datasets' 
        foreach($group in $allGroups.value)
        {                
            Write-Verbose 'Build Group path for API call'    
            $groupsPath = "myorg/groups/$($group.id)"
            
            Write-Verbose 'Build Dataset API String'
            $uri = "https://api.powerbi.com/v1.0/$groupsPath/datasets"
            Write-Verbose 'Return all datasets in Workspace'
            $datasets = Invoke-RestMethod -Uri $uri -Headers $authHeader -Method GET
            
            Write-Verbose 'Loop through datasets to query refresh info'
            foreach($dataset in $datasets.value)
            {
                if($dataset.isRefreshable -eq $true) #We can only return refresh info on datasets that can be refreshed
                {
                    Write-Verbose 'Build Refresh API String'
                    $uri2 = "https://api.powerbi.com/v1.0/$groupsPath/datasets/$($dataset.id)/refreshes"
                    Write-Verbose 'Return refresh info for each dataset'
                    $refreshes = Invoke-RestMethod -Uri $uri2 -Headers $authHeader -Method GET

                    
                    if($($refreshes.value[0].status) -eq 'Failed' -And $($refreshes.value[0].refreshType) -eq 'Scheduled' )
                    {
                        Write-Verbose 'Force refresh of failed Scheduled refreshes'
                        $forcerefresh = Invoke-RestMethod -Uri $uri2 -Headers $authHeader -Method POST
                        #$forcerefresh
                    }
                    
                    elseif ($($refreshes.value[0].status) -eq 'Failed' -And $($refreshes.value[0].refreshType) -eq 'ViaApi' -And [DateTime]$($refreshes.value[0].endTime) -gt $timeWindow)
                    {
                        Write-Verbose 'Notifying of refreshes that failed via the API'
                        #Build email HTML and pass to function
                        $title = "Power BI Dataset Alerting"
                        $subject = "$($title): $($dataset.name)"
                        $htmlContent = "</br><div>Scheduled & Forced Refreshes have both failed! Please investigate</div>"
                        $htmlContent += "</br><div>Workspace: <a href=""https://app.powerbi.com/groups/$($group.id)/contentlist?onlySharedWithMe=false"">$($group.name)</a></div>"
                        $htmlContent += "</br><div>DataSet: <a href=""https://app.powerbi.com/groups/$($group.id)/settings/datasets/$($dataset.id)"">$($dataset.name)</a></div>"

                        Invoke-AlertEmail -title $title -htmlContent $htmlContent -subject $subject -alertColour "#F2C811"                                                                   
                    }
                }  
            }
            $datasets = $null
        }		
    }
    catch{
        Writ-Error 'Data collection failure'
        $script = $MyInvocation.MyCommand.Name	
        $subject = "$script Error: Data Collection Failure"
        $htmlContent = $_.Exception.Message
        Invoke-AlertEmail -title $script -htmlContent $htmlContent -subject $subject -alertColour "#FF5733"  
        throw $_
    }
}
